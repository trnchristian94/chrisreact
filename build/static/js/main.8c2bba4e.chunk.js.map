{"version":3,"sources":["components/nvgtbar/NavigationBar.tsx","components/Home.tsx","components/About.tsx","components/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavigationBar","Navbar","bg","variant","Brand","href","Nav","className","to","Form","inline","FormControl","type","placeholder","Button","React","Component","Home","About","Contact","App","exact","path","component","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAuCeA,E,iLA7BP,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,kBACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,4BACE,kBAAC,IAAD,CAAMC,GAAI,IAAKD,UAAU,YAAzB,SAIF,4BACE,kBAAC,IAAD,CAAMC,GAAI,WAAYD,UAAU,YAAhC,YAIF,4BACE,kBAAC,IAAD,CAAMC,GAAI,SAAUD,UAAU,YAA9B,WAKJ,kBAACE,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASN,UAAU,YACxD,kBAACO,EAAA,EAAD,CAAQX,QAAQ,gBAAhB,gB,GAxBYY,IAAMC,W,QCInBC,E,iLARP,OACE,6BACE,yC,GAJOF,IAAMC,WCUVE,E,iLARP,OACE,6BACE,0C,GAJQH,IAAMC,WCUXG,E,iLARP,OACE,6BACE,4C,GAJUJ,IAAMC,WCmCbI,EA5BO,WACpB,OACE,kBAAC,IAAD,KACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWJ,IAClC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWL,KAElC,mCACO,4CADP,wBAGA,uBACEX,UAAU,WACVF,KAAK,sBACLmB,OAAO,SACPC,IAAI,uBAJN,mBCXUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8c2bba4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavigationBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n              <Navbar.Brand href=\"#home\">Christian T.R.</Navbar.Brand>\r\n              <Nav className=\"mr-auto\">\r\n                <li>\r\n                  <Link to={\"/\"} className=\"nav-link\">\r\n                    Home\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link to={\"/contact\"} className=\"nav-link\">\r\n                    Contact\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link to={\"/about\"} className=\"nav-link\">\r\n                    About\r\n                  </Link>\r\n                </li>\r\n              </Nav>\r\n              <Form inline>\r\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                <Button variant=\"outline-info\">Search</Button>\r\n              </Form>\r\n            </Navbar>\r\n          );\r\n      }\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React from \"react\";\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return (\r\n          <div>\r\n            <h2>Home</h2>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (\r\n          <div>\r\n            <h2>About</h2>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nclass Contact extends React.Component {\r\n    render() {\r\n        return (\r\n          <div>\r\n            <h2>Contact</h2>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\nimport './App.css';\n\nimport NavigationBar from \"./components/nvgtbar/NavigationBar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavigationBar />\n        <header className=\"App-header\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/contact\" component={Contact} />\n            <Route path=\"/about\" component={About} />\n          </Switch>\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}